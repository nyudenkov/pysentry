# Azure DevOps Pipeline for PySentry Security Scanning
# Enterprise-grade CI/CD integration with comprehensive security analysis

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
      - hotfix/*
  paths:
    include:
      - requirements*.txt
      - setup.py
      - pyproject.toml
      - Pipfile*
      - '**/*.py'

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - requirements*.txt
      - setup.py
      - pyproject.toml
      - Pipfile*

variables:
  pythonVersion: '3.11'
  pysentryVersion: 'latest'
  sarifOutputFile: 'pysentry-security-results.sarif'
  vmImageName: 'ubuntu-latest'

parameters:
  - name: scanMode
    displayName: 'Vulnerability Scan Mode'
    type: string
    default: 'full'
    values:
      - 'full'
      - 'incremental'
      - 'critical-only'
  
  - name: failOnHigh
    displayName: 'Fail build on high severity vulnerabilities'
    type: boolean
    default: true
  
  - name: generateSARIF
    displayName: 'Generate SARIF output for security tools'
    type: boolean
    default: true
  
  - name: enforcePolicies
    displayName: 'Enforce enterprise security policies'
    type: boolean
    default: false

stages:
  - stage: SecurityScanning
    displayName: 'Security Vulnerability Scanning'
    jobs:
      - job: SetupEnvironment
        displayName: 'Setup PySentry Environment'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'
          
          - script: |
              python -m pip install --upgrade pip
              pip install pysentry-rs==$(pysentryVersion)
              pip install -r requirements.txt || echo "No requirements.txt found"
            displayName: 'Install PySentry and dependencies'
          
          - script: |
              pysentry-rs --version
              echo "PySentry installation verified"
            displayName: 'Verify PySentry installation'

      - job: VulnerabilityScanning
        displayName: 'Dependency Vulnerability Scanning'
        dependsOn: SetupEnvironment
        pool:
          vmImage: $(vmImageName)
        strategy:
          matrix:
            ${{ if eq(parameters.scanMode, 'full') }}:
              FullScan:
                scanType: 'full'
                scanArgs: '--recursive --detailed-report'
                allowFailure: ${{ not(parameters.failOnHigh) }}
            ${{ if eq(parameters.scanMode, 'incremental') }}:
              IncrementalScan:
                scanType: 'incremental'
                scanArgs: '--only-changed'
                allowFailure: true
            ${{ if eq(parameters.scanMode, 'critical-only') }}:
              CriticalScan:
                scanType: 'critical'
                scanArgs: '--severity critical,high --fail-on high'
                allowFailure: false
        
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'
          
          - script: |
              python -m pip install --upgrade pip
              pip install pysentry-rs==$(pysentryVersion)
            displayName: 'Install PySentry'
          
          - script: |
              echo "Running $(scanType) vulnerability scan"
              
              # Build scan command
              SCAN_CMD="pysentry-rs $(scanArgs)"
              
              # Add SARIF output if requested
              if [ "${{ parameters.generateSARIF }}" = "True" ]; then
                SCAN_CMD="$SCAN_CMD --output-format sarif --output $(sarifOutputFile)"
              fi
              
              # Add configuration if exists
              if [ -f ".pysentry.toml" ]; then
                SCAN_CMD="$SCAN_CMD --config .pysentry.toml"
              fi
              
              # Execute scan
              echo "Executing: $SCAN_CMD ."
              $SCAN_CMD .
              
              # Check exit code
              EXIT_CODE=$?
              if [ $EXIT_CODE -ne 0 ]; then
                if [ "$(allowFailure)" = "True" ]; then
                  echo "##vso[task.logissue type=warning]Vulnerabilities found but continuing build"
                  echo "##vso[task.complete result=SucceededWithIssues]"
                else
                  echo "##vso[task.logissue type=error]Critical vulnerabilities found - failing build"
                  exit $EXIT_CODE
                fi
              fi
            displayName: 'Execute Security Scan'
            continueOnError: ${{ eq(variables['allowFailure'], 'true') }}
          
          # Generate additional reports
          - script: |
              # Generate human-readable HTML report
              pysentry-rs --output-format html --output security-report.html .
              
              # Generate JSON report for further processing
              pysentry-rs --output-format json --output security-report.json .
              
              # Generate executive summary
              pysentry-rs --summary --output-format markdown --output executive-summary.md .
            displayName: 'Generate Security Reports'
            condition: succeededOrFailed()
          
          # Publish SARIF results
          - task: PublishSecurityAnalysisLogs@3
            inputs:
              artifactName: 'CodeAnalysisLogs'
              toolLogsDir: '$(Agent.WorkFolder)'
              allTools: false
              sarif: true
            condition: and(succeededOrFailed(), eq('${{ parameters.generateSARIF }}', 'true'))
            displayName: 'Publish SARIF Results'
          
          # Publish test results and artifacts
          - task: PublishHtmlReport@1
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)'
              tabName: 'Security Report'
              reportTitle: 'PySentry Security Analysis'
            condition: succeededOrFailed()
            displayName: 'Publish Security Report'
          
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)'
              artifactName: 'SecurityReports'
              publishLocation: 'Container'
              includeRootFolder: false
              parallel: true
              parallelCount: 8
            condition: succeededOrFailed()
            displayName: 'Publish Security Artifacts'

  - stage: ComplianceValidation
    displayName: 'Compliance and Policy Validation'
    dependsOn: SecurityScanning
    condition: succeeded()
    jobs:
      - job: LicenseCompliance
        displayName: 'License Compliance Check'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'
          
          - script: |
              python -m pip install --upgrade pip
              pip install pysentry-rs==$(pysentryVersion)
            displayName: 'Install PySentry'
          
          - script: |
              echo "Checking license compliance"
              pysentry-rs --check-licenses --output-format json --output license-compliance.json .
            displayName: 'License Compliance Scan'
          
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'license-compliance.json'
              artifactName: 'LicenseCompliance'
            displayName: 'Publish License Report'

      - job: PolicyEnforcement
        displayName: 'Security Policy Enforcement'
        pool:
          vmImage: $(vmImageName)
        condition: eq('${{ parameters.enforcePolicies }}', 'true')
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'
          
          - script: |
              python -m pip install --upgrade pip
              pip install pysentry-rs==$(pysentryVersion)
            displayName: 'Install PySentry'
          
          - script: |
              echo "Enforcing enterprise security policies"
              if [ -f ".pysentry-policy.yml" ]; then
                pysentry-rs --policy-file .pysentry-policy.yml --enforce-policy .
              else
                echo "##vso[task.logissue type=warning]No security policy file found"
              fi
            displayName: 'Enforce Security Policies'

  - stage: SecurityReporting
    displayName: 'Security Reporting and Integration'
    dependsOn: 
      - SecurityScanning
      - ComplianceValidation
    condition: succeededOrFailed()
    jobs:
      - job: SecurityDashboard
        displayName: 'Enterprise Security Dashboard Integration'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'SecurityReports'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Security Reports'
          
          - script: |
              echo "Uploading results to enterprise security dashboard"
              
              # Upload SARIF results if available
              if [ -f "$(System.ArtifactsDirectory)/SecurityReports/$(sarifOutputFile)" ]; then
                if [ -n "$(SECURITY_DASHBOARD_URL)" ] && [ -n "$(SECURITY_API_TOKEN)" ]; then
                  curl -X POST "$(SECURITY_DASHBOARD_URL)/api/sarif" \
                       -H "Authorization: Bearer $(SECURITY_API_TOKEN)" \
                       -H "Content-Type: application/json" \
                       -d @"$(System.ArtifactsDirectory)/SecurityReports/$(sarifOutputFile)"
                else
                  echo "Security dashboard not configured"
                fi
              fi
            displayName: 'Upload to Security Dashboard'
            condition: and(succeededOrFailed(), ne(variables['SECURITY_DASHBOARD_URL'], ''))

      - job: NotificationHandling
        displayName: 'Security Notification Handling'
        pool:
          vmImage: $(vmImageName)
        condition: failed()
        steps:
          - script: |
              echo "Processing security failure notifications"
              
              # Send Slack notification if configured
              if [ -n "$(SLACK_WEBHOOK_URL)" ]; then
                curl -X POST -H 'Content-type: application/json' \
                     --data '{"text":"🚨 Security Alert: Critical vulnerabilities found in $(Build.Repository.Name) - $(Build.SourceBranchName). Check $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId) for details."}' \
                     "$(SLACK_WEBHOOK_URL)"
              fi
              
              # Send Teams notification if configured
              if [ -n "$(TEAMS_WEBHOOK_URL)" ]; then
                curl -X POST -H 'Content-type: application/json' \
                     --data '{"@type":"MessageCard","@context":"http://schema.org/extensions","summary":"Security Alert","themeColor":"ff0000","sections":[{"activityTitle":"Security Vulnerabilities Detected","activitySubtitle":"$(Build.Repository.Name) - $(Build.SourceBranchName)","activityImage":"https://via.placeholder.com/64x64/ff0000/ffffff?text=!","facts":[{"name":"Project","value":"$(Build.Repository.Name)"},{"name":"Branch","value":"$(Build.SourceBranchName)"},{"name":"Build","value":"$(Build.BuildNumber)"}],"markdown":true}],"potentialAction":[{"@type":"OpenUri","name":"View Build Results","targets":[{"os":"default","uri":"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"}]}]}' \
                     "$(TEAMS_WEBHOOK_URL)"
              fi
            displayName: 'Send Security Notifications'

# Variable groups for enterprise environments
variables:
  - group: 'PySentry-Security-Config'
  - group: 'Enterprise-Notifications'